#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% enables calculations
\usepackage{calc}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master TFG.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Abstract"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Trabajo realizado
\end_layout

\begin_layout Standard
Durante las 2 primeras semanas de trabajo se realizo una serie de ejercicios
 para coger practica con el lenguaje de c++, este proceso de aprendizaje
 abarco conceptos como los smart pointers para la gestion de memoria dinámica,
 el uso de templates y conceptos para generalizar comportamientos y requerimient
os, uso de macros para definir parametros en compilación, etc.
\end_layout

\begin_layout Standard
Posteriormente se realizó el diseño e implementacion de una primera aproximación
 al objetivo del proyecto, una lista ordenada como alternativa al set de
 c++.
 La idea consiste en implementar una interfaz de lista ordenada a través
 de una lista de listas, con el objetivo de conservar las ventajas que conlleva
 la contiguidad en memoria de una lista, pero limitando el coste al insertar
 o eliminar un elemento que este en mitad de la lista.
 Se han realizado dos implementaciones de este concepto, una de ellas es
 una lista de listas de elementos (HollowList) mientras que la segunda es
 una lista de punteros a listas de elementos (ptrHollowList).
 Los resultados esperados son que esta ultima implementación sea más óptima
 que la primera, ya que una lista de listas tendria el mismo problema que
 una lista a la hora de insertar un elemento en mitad de la lista, todos
 los elementos posteriores al nuevo elemento se han de mover una posición,
 mientras que en el caso de una lista de punteros solo seria necesario mover
 los elementos posteriores al elemento añadido dentro de la misma lista.
\end_layout

\begin_layout Standard
Una vez realizada la implementación de estas dos versiones de una lista
 se implementaron una serie de pruebas y comparativas con distintos valores
 de los datos a insertar.
 Las pruebas consisten en la insercion de elementos (un objeto puntuacion
 que contiene un entero y un decimal), desde 100.000 hasta 5.000.000 y además
 en algunos casos también se prueba el uso (extraer e insertar 1.000.000 de
 nuevos elementos) de las estructuras ya rellenadas.
 Las pruebas se realizaron con listas tanto del estandar como con otras
 implementaciones propias con el fin de obtener comparaciones realistas,
 las implementaciones usadas han sido: std:vector<puntuacion>, std:set<puntuacio
n>, lista de punteros a puntuacion con algoritmo de busqueda binaria recursivo,
 lista de punteros a puntuacion con algoritmo de busqueda binaria iterativo,
 lista de puntuaciones con algoritmo de busqueda binaria recursivo, lista
 de puntuaciones con algoritmo de busqueda binaria iterativo, ptrHollowList
 y HollowList
\end_layout

\begin_layout Standard
A continuación se muestran distintas graficas obtenidas en las pruebas realizada
s insertando elementos en el orden inverso con respecto al orden de las
 listas:
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-SLOW-INSERT.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más lentas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-FAST-INSERT.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-SLOW-USAGE.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-FAST-USAGE.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En estas gráficas se puede observar de que esta las implementaciones de
 HollowList y ptrHollowList, superan con creces tanto la implementación
 de std::vector de C++ como las implementaciones propias de listas ordenadas
 en C, sin embargo estas son superadas en un ratio de x10 por el std:set.
 Por otra parte, estas gráficas representan el peor caso para las listas
 ordenadas, analizando graficas que represetan un uso más normal de las
 listas, insertar elementos aleatorios, se obtienen resultados más prometedores:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-SLOW-INSERT.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más lentas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-FAST-INSERT.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-SLOW-USAGE.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-FAST-USAGE.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Observando estás graficas se observa que las implementaciones de tantos
 set como ptrHollowList se mantienen las mejores, sin embargo las diferencias
 de rendimiento entre el set y ptrHollowList se han visto reducidas a aproximada
mente un ratio de x2, 17.9992 segundos de inserción y 5.24598 segundos de
 uso en el caso de la ptrHollowList contra 10.603 segundos de inserción y
 2.37936 segundos en el uso.
 Aunque las diferencias entre ambas implementaciones todavia son grandes,
 todavía hay espacio de mejora para la implementación de las HollowList,
 ya que en estas pruebas todavia no se ha tenido el cuenta el tamaño máximo
 que pueden llegar a alcanzar las interiores, hasta este momento se ha probado
 con un tamaño máximo de 32, pero es posible que probando con valores más
 grandes mejore el rendimiento de esta implementación.
\end_layout

\begin_layout Standard
Como comparación preliminar, las siguientes gráficas muestran los resultados
 obtenidos con ptrHollowList con tamaño 256 comparandolos con los resultados
 obtenidos con set sobre los mismos tests:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-FAST-INSERT-256.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más lentas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenInverse-FAST-USAGE-256.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de inserción de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-FAST-INSERT-256.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/figure_GenRandom-FAST-USAGE-256.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Estadísticas de rendimiento de uso de las implementaciones más rápidas
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter*

\lang english
Modificaciones al Plan de Trabajo
\end_layout

\begin_layout Standard

\lang english
Los objetivos del trabajo han sido ligeramente modificados, ya que el trabajo
 se ha enfocado hacia la implementación de un conjunto ordenado en lugar
 de un conjunto indexado.
 Por lo tanto la lista de objetivos actualizada es la siguiente:
\end_layout

\begin_layout Enumerate

\lang english
Analizar las interfaces del std::set y el std::vector.
\end_layout

\begin_layout Enumerate

\lang english
Diseñar e implementar alternativas al array que no usen almacenamiento contiguo
 de todos sus elementos con interfaz tipo conjunto ordenado.
 
\end_layout

\begin_layout Enumerate

\lang english
Diseñar e implementar un conjunto de pruebas automáticas para evaluar la
 validez y rendimiento de las estructuras de datos diseñadas.
 
\end_layout

\begin_layout Enumerate

\lang english
Analizar el rendimiento de estructuras de datos alternativas a los arrays
 cuya interfaz se corresponde con un conjunto indexado y compararlos con
 otras implementaciones.
\end_layout

\begin_layout Standard

\lang english
Por otra parte, las tareas no se han visto modificadas, ya que los pasos
 a seguir para alcanzar los nuevos objetivos son los mismos, por lo tanto
 las tareas a realizar son las siguientes:
\end_layout

\begin_layout Enumerate

\lang english
Formación previa y preparación del entorno del trabajo.
 
\end_layout

\begin_layout Enumerate

\lang english
Análisis del problema y planteamiento de alternativas.
 
\end_layout

\begin_layout Enumerate

\lang english
Diseño y arquitectura del software.
 
\end_layout

\begin_layout Enumerate

\lang english
Diseño e Implementación de las estructuras de datos.
 
\end_layout

\begin_layout Enumerate

\lang english
Validación, evaluación y comparación de rendimientos.
 
\end_layout

\begin_layout Enumerate

\lang english
Generación de documentación.
 
\end_layout

\begin_layout Enumerate

\lang english
Escritura de la memoria.
\end_layout

\begin_layout Standard

\lang english
El estado actual de las tareas se muestra en el siguiente diagrama, indicando
 en verde las tareas ya terminadas, en amarillo las que estan en desarrollo
 y en rojo las que aun no se han comenzado:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/Diagrama de Gant.png

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang english
Diagrama de Gantt
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Abstract} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
adds table of contents entry
\end_layout

\end_inset


\end_layout

\end_body
\end_document
