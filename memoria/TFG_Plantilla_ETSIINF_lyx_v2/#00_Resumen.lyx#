#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% enables calculations
\usepackage{calc}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master TFG.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Abstract"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Resumen
\end_layout

\begin_layout Standard
Este documento se centra en la comparación de diferentes implementaciones
 de estructuras de datos en el lenguaje de programación C++.
 Las estructuras de datos analizadas incluyen std::set, HollowList, ptrHollowLis
t y BinaryHeap.
 El objetivo del estudio es evaluar el rendimiento y las características
 de cada implementación en términos de operaciones de inserción, consulta
 y eliminación.
\end_layout

\begin_layout Standard
Se comienza analizando la implementación del set en C++, que utiliza un
 árbol de búsqueda binaria equilibrado conocido como Red-Black Tree.
 Se describen las reglas que rigen este tipo de árbol y se explican las
 restricciones impuestas por los Binary Search Trees.
 Estas restricciones garantizan que el árbol se mantenga autoequilibrado,
 lo que resulta en un tiempo de ejecución de O(log n) para las operaciones
 de inserción, eliminación y búsqueda.
\end_layout

\begin_layout Standard
A continuación, se presentan las estructuras HollowList y ptrHollowList.
 Ambas se basan en la idea de utilizar un std::vector que contiene subvectores
 para almacenar los elementos.
 La diferencia radica en que ptrHollowList almacena una lista de punteros
 a std::vector, mientras que HollowList almacena directamente los subvectores
 en un vector principal.
 Se discute el parámetro relevante del tamaño de las sublistas, que determina
 la cantidad de elementos que puede contener cada vector antes de dividirse
 en dos vectores más pequeños.
 Se detallan las operaciones de inserción, consulta y eliminación en estas
 estructuras, y se analiza su complejidad.
 Se concluye que la operación de inserción tiene un tiempo de ejecución
 de aproximadamente O(log n), donde n es el número total de elementos.
\end_layout

\begin_layout Standard
Otra implementación analizada es BinaryHeap, que utiliza un montículo binario
 basado en un arreglo en lugar de un árbol.
 Se explican las ventajas de esta estructura en términos de consumo de memoria
 y recuperación de caché.
 Se describen las operaciones de inserción y eliminación en BinaryHeap,
 y se muestra que ambas tienen un tiempo de ejecución de O(log n).
\end_layout

\begin_layout Standard
Se realizan pruebas exhaustivas para evaluar el rendimiento de cada estructura
 en diferentes escenarios, incluyendo diferentes tamaños de entrada y tipos
 de objetos a almacenar.
 Se miden los tiempos de ejecución, el uso de memoria y los fallos de página
 en cada estructura.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter*

\lang english
Abstract
\end_layout

\begin_layout Standard

\lang english
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Abstract} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
adds table of contents entry
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
<<Abstract of the Final Degree Project.
 Maximum length: 2 pages.>>
\end_layout

\begin_layout Standard

\lang english
End
\end_layout

\end_body
\end_document
