#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
\AtBeginDocument{%
 \renewcommand{\ref}[1]{\mbox{\autoref{#1}}}
}
\def\refnamechanges{%
 \renewcommand*{\equationautorefname}[1]{}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}
\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}

% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% http://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master TFG.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8x
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Resultados
\end_layout

\begin_layout Section
Especificaciones del sistema
\end_layout

\begin_layout Standard
Para la ejecución de las pruebas se ha utilizado un equipo con las siguientes
 especificaciones:
\end_layout

\begin_layout Itemize
Procesador: AMD Ryzen 5 5500U with Radeon Graphics 2.10 GHz
\end_layout

\begin_layout Itemize
RAM: 8 GB
\end_layout

\begin_layout Itemize
Sockets: 1
\end_layout

\begin_layout Itemize
Núcleos: 6
\end_layout

\begin_layout Itemize
Procesadores lógicos: 12
\end_layout

\begin_layout Itemize
Cache L1: 384 KB
\end_layout

\begin_layout Itemize
Cache L2 3 MB
\end_layout

\begin_layout Itemize
Cache L3: 8 MB
\end_layout

\begin_layout Itemize
Compilador: GNU 9.3.0 con opción -O3
\end_layout

\begin_layout Section
Exposición de resultados
\end_layout

\begin_layout Standard
Para poder visualizar mejor los resultados de las pruebas se han utilizado
 las librerías pandas, matplotlib y numpy de Python.
\end_layout

\begin_layout Standard
En primer lugar, se ha utilizadola librería pandas para leer los archivos
 CSV donde se han almacenado los resultados de las pruebas y filtrar los
 resultados por estructura y caso de prueba para poder diferenciar los rendimien
tos de las distintas estructuras en los distintos casos de prueba.
\end_layout

\begin_layout Standard
A continuación se utiliza la librería numpy para calcular las medias de
 rendimiento por cada caso de prueba, ya que, excluyendo la estructura 
\family typewriter
std::set
\family default
, todas las pruebas se han realizado 3 veces con el objetivo de suavizar
 las variaciones y obtener una visión más general del rendimiento de cada
 estructura.
 Por último, una vez se han calculado las medias, para las estructuras ptrHollow
List, HollowList y HollowListv2, se seleccionan los tamaños de sublistas
 que den un mejor resultado, para así evitar mostrar el rendimiento de todas
 lo que podría complicar la comprensión de las gráficas.
\end_layout

\begin_layout Standard
Por último, se usa la librería matplotlib para generar las gráficas en las
 que visualizarán los resultados.
 Para las graficas se han utilizado distintos colores para identificar con
 facilidad las distintas estructuras y los resultados se muestran con escala
 logarítmica en ambos ejes.
\end_layout

\begin_layout Standard
Dada la gran cantidad de gráficas que se han generado, solo se comentaran
 las relacionadas con los casos de prueba que se usan elementos en orden
 aleatorio, ya que este será el caso más general de uso.
\end_layout

\begin_layout Subsection

\series bold
Insertar elementos
\end_layout

\begin_layout Standard
En la gráfica de la 
\begin_inset CommandInset ref
LatexCommand ref
reference "InsPeqRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se puede observar que en el caso del objeto pequeño la estructura más eficiente
 al insertar elementos es el 
\family typewriter
BinaryHeap
\family default
, siendo los tiempos del resto de estructuras entre 2 y 5 segundos más lentas
 en el caso de 4 millones de elementos.
 Las siguientes estructuras más eficientes son 
\family typewriter
HollowList
\family default
 usando sublistas de 512 elementos, seguida por 
\family typewriter
ptrHollowList
\family default
 con sublistas de 256 elementos y por último 
\family typewriter
HollowListv2 
\family default
con sublistas de 128 elementos.
 En este caso no se aprecian grandes diferencias en el rendimiento de estas
 3 estructuras.
 La estructura menos eficiente en el caso de inserción de elementos aleatorios
 pequeños es el 
\family typewriter
std::set 
\family default
con un tiempo de 7,5 segundos.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Small-INSERT.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "InsPeqRandom"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Insertar valores aleatorios del objeto pequeño
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
En el caso de las pruebas realizadas sobre el objeto mediano, se puede observar
 en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "InsMedRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 que las estructuras siguen el mismo comportamiento que en el caso del objeto
 pequeño, con la diferencia de que en este caso 
\family typewriter
HollowListv2
\family default
 tiene un rendimiento peor que 
\family typewriter
ptrHollowList 
\family default
y 
\family typewriter
HollowList
\family default
.
 A pesar de este cambio se mantiene el orden de eficiencia de las estructuras,
 siendo 
\family typewriter
BinaryHeap
\family default
 la más eficiente con un tiempo de 2,7 segundos al insertar 4.000.000, seguida
 por 
\family typewriter
HollowList 
\family default
y 
\family typewriter
ptrHollowList 
\family default
con un tiempo de aproximadamente 6 segundos.
 Por último se encuentran las estructuras 
\family typewriter
std::set 
\family default
y 
\family typewriter
HollowListv2 
\family default
con un tiempo de 7,5 segundos.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Medium-INSERT.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "InsMedRandom"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Insertar valores aleatorios del objeto mediano
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por último, en el caso de los objetos grandes, se aprecia un cambio considerable
 en el rendimiento de las distintas estructuras.
 Como se ve en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "InsGraRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 la estructura más rápida sigue siendo el 
\family typewriter
BinaryHeap
\family default
, sin embargo, la segunda estructura más eficiente ha pasado a ser el 
\family typewriter
std::set
\family default
, superando a 
\family typewriter
HollowList
\family default
 y 
\family typewriter
ptrHollowList
\family default
.
 La última posición
\family typewriter
 
\family default
es ocupada por la estructura 
\family typewriter
HollowListv2
\family default
.
 También se puede observar que en este caso las estructuras 
\family typewriter
HollowList
\family default
 y 
\family typewriter
ptrHollowList
\family default
, las estructuras que tenían límites de tamaño de las sublistas más pequeños,
 128 elementos por sublista, han obtenido mejores resultados, frente a los
 casos de prueba de elementos pequeños donde las estructuras más eficientes
 tenían tamaños de sublista de 512 o 256.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Large-INSERT.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "InsGraRandom"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Insertar valores aleatorios del objeto grande
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A partir de los resultados obtenidos, se puede concluir que todas las estructura
s cumplen de forma práctica el orden de complejidad que se les exigia en
 los requisitos definidos.
\end_layout

\begin_layout Subsection

\series bold
Uso de la estructura
\end_layout

\begin_layout Standard
Como se ha explicado anteriormente, este caso de prueba consiste en la inserción
 y eliminación de 1.000.000 de elementos una vez ya esta la estructura llena
 con una cantidad de terminada de elementos.
\end_layout

\begin_layout Standard
En la 
\begin_inset CommandInset ref
LatexCommand ref
reference "UsoRandomPeq"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se pueden observar resultados similares a los que se han obtenido en los
 tiempos de inserción de objetos pequeños, la estructura 
\family typewriter
BinaryHeap
\family default
 es la más eficiente, seguida de las estructuras 
\family typewriter
HollowList, ptrHollowList
\family default
 y 
\family typewriter
HollowListv2
\family default
 y, en último lugar la estructura 
\family typewriter
std::set
\family default
.
 De nuevo observamos que en este caso las variaciones más eficientes de
 las estructuras 
\family typewriter
HollowList 
\family default
y 
\family typewriter
ptrHollowList 
\family default
tienen tamaños de sublistas más grandes, en este caso 512 para ambas estructuras
, mientras que 
\family typewriter
HollowListv2 
\family default
mantiene el mismo tamaño de sublista, 128.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Small-USAGE.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "UsoRandomPeq"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de distintas estructuras con objetos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al igual que en el caso de prueba anterior, en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "UsoMedRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se observan resultados similares a los obtenidos en el caso de la inserción,
 con la única diferencia de que en este caso la estructura 
\family typewriter
HollowListv2 
\family default
tiene un rendimiento notablemente peor que 
\family typewriter
std::set 
\family default
en la prueba realizada con 4.000.000.
 Analizando la evolución de la gráfica, se puede estimar que este caso es
 una anomalía, y que, obteniendo una media usando más casos de prueba, la
 evolución de la gráfica sería más gradual.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Medium-USAGE.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "UsoMedRandom"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de distintas estructuras con objetos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Del mismo modo que sucedía sucede con la inserción de elementos, en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "UsoGraRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se puede observar los mismos cambios, aunque con dos diferencias notables.
 La primera es que, al contrario que en el caso prueba de insertar elementos,
 las estructuras 
\family typewriter
HollowList 
\family default
y 
\family typewriter
ptrHollowList 
\family default
tienen un comportamiento notablemente peor que el que se obtiene usando
 la estructura 
\family typewriter
std::set
\family default
.
 La segunda diferencia es que en este caso el rendimiento de 
\family typewriter
HollowListv2
\family default
 es notablemente peor que el rendimiento del resto de estructuras.
 En cuanto al tamaño para las sublistas de las estructuras 
\family typewriter
HollowList
\family default
 de nuevo se observa que en el caso de prueba con objetos grandes las estructura
s obtienen un mejor rendimiento al usar sublistas pequeñas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Large-USAGE.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "UsoGraRandom"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de distintas estructuras con objetos grandes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aunque en este caso de prueba no se evalua de forma concreta ninguno de
 los requisitos que se imponia a las estructuras, vemos que en este caso
 tambien mantienen un coste aproximado logarítmico, destacando en este aspecto
 la estructura 
\family typewriter
BinaryHeap
\family default
 la cual mantiene el tiempo de uso con 1.000.000 de elementos de forma casi
 constante desde las pruebas realizadas con 500.000 elementos hasta las realizada
s con 4.000.000 de elementos.
\end_layout

\begin_layout Subsection

\series bold
Borrado de elementos
\end_layout

\begin_layout Standard
En cuanto a los tiempos de borrado de los elementos en las figuras 
\begin_inset CommandInset ref
LatexCommand eqref
reference "BorradoPeqRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand eqref
reference "BorradoMedRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand eqref
reference "BorradoGraRandom"
plural "false"
caps "false"
noprefix "false"

\end_inset

, se observa que, debido a su coste constante del borrado, las estructuras
 
\family typewriter
HollowList
\family default
 y 
\family typewriter
ptrHollowList 
\family default
son las más rápidas al ejecutar está operación, siendo 10 veces más rápidas
 que la estructura std::set y aproximadamente 100 veces más rápidas que
 las estructura BinaryHeap.
 Un resultado que llama la atención es que el rendimiento de la operación
 de borrado de elementos para la estructura 
\family typewriter
HollowListv2
\family default
 disminuye según aumenta el tamaño de los elementos que se utilizan en las
 estructuras.
 Este resultado tambien aparece en el resto de estructuras, pero con un
 efecto mucho menor.
 Esto se puede observar comparando la estructura 
\family typewriter
HollowListv2 
\family default
con la estructura 
\family typewriter
std::set
\family default
.
 En el caso de borrado de elementos pequeños se observa que la estructura
 
\family typewriter
HollowListv2 
\family default
es más eficiente que el 
\family typewriter
std::set
\family default
, en el caso de borrado de elementos medianos pasan a tener un rendimiento
 aproximandamente igual.
 Y por último, en el caso de borrado de elementos grandes, la estructura
 
\family typewriter
HollowListv2 
\family default
es superada por la estructura 
\family typewriter
std::set
\family default
.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Small-REMOVE.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "BorradoPeqRandom"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Borrado de elementos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Medium-REMOVE.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "BorradoMedRandom"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Borrado de elementos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_GenRandom-Large-REMOVE.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "BorradoGraRandom"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Borrado de elementos grandes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Tiempos totales de ejecución
\end_layout

\begin_layout Standard
Como se observa en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "TiempoPeq"
plural "false"
caps "false"
noprefix "false"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "TiemposMed"
plural "false"
caps "false"
noprefix "false"

\end_inset

 y la 
\begin_inset CommandInset ref
LatexCommand ref
reference "TiemposGra"
plural "false"
caps "false"
noprefix "false"

\end_inset

 el tiempo total del uso de estas estructuras se ve fuertemente afectado
 por la operación de inserción, ya que es la más costosa.
 Por esta razón, se observa que los rendimientos de las estructuras son
 muy similares a los indicados anteriormente.
 Un detalle que cabe resaltar en contraposición a los resultados obtenidos
 con los tiempos individuales es que el tamaño de sublistas para las estructuras
 
\family typewriter
HollowList
\family default
 y 
\family typewriter
ptrHollowList 
\family default
se mantiene constante 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Tiempo total (s)-GenRandom-0.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TiempoPeq"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Tiempo total (s)-GenRandom-1.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TiemposMed"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Tiempo total (s)-GenRandom-2.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TiemposGra"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos grandes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Memoria total usada
\end_layout

\begin_layout Standard
En cuanto al uso de memoria se observa en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "MemPeq"
plural "false"
caps "false"
noprefix "false"

\end_inset

 y la 
\begin_inset CommandInset ref
LatexCommand ref
reference "MemMed"
plural "false"
caps "false"
noprefix "false"

\end_inset

 que hay una gran diferencia en el uso de memoria entre el 
\family typewriter
std::set
\family default
, llegando a los 190.000 KB en las pruebas con elementos pequeños y hasta
 250.000 KB en el caso de los medianos, mientras que en el caso de 
\family typewriter
HollowList 
\family default
y 
\family typewriter
ptrHollowList
\family default
 usan aproximadamente 50.000 KB y 95.000 KB respectivamente.
 Esta gran diferencia de usos de memoria se ve muy reducida en el caso de
 las estructuras grandes, como se observa en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "MemGra"
plural "false"
caps "false"
noprefix "false"

\end_inset

, donde el uso de memoria para 
\family typewriter
HollowList 
\family default
es de 370.000 KB, mientras que en el caso de 
\family typewriter
std::set 
\family default
usa 440.000 KB, En cuanto al uso de memoria del resto de estructuras, la
 estructura 
\family typewriter
HollowListv2 
\family default
tiene
\family typewriter
 
\family default
un uso de memoria ligeramente inferior al que tienen las estructuras
\family typewriter
 HollowList
\family default
 y 
\family typewriter
ptrHollowList
\family default
, usando 43.000 KB en el caso de elementos pequeños, 85.000 KB en el caso
 de elementos medianos y 350 KB en el caso de elementos grandes.
 Por último, tal y como se observa en las gráficas, la estructura 
\family typewriter
BinaryHeap 
\family default
tiene un uso de memoria similar al de las distintas estructuras 
\family typewriter
HollowList
\family default
, mejorándolo en algunos casos y empeorándolo en otros.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Memoria (KB)-GenRandom-0.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "MemPeq"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de memoria en las pruebas con elementos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Memoria (KB)-GenRandom-1.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "MemMed"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de memoria en las pruebas con objetos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Memoria (KB)-GenRandom-2.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "MemGra"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Uso de memoria en las pruebas con objetos grandes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Fallos de página 
\end_layout

\begin_layout Standard
En el caso de los fallos de página se observa la misma tendencia que en
 el uso de memoria.
 Como se puede ver en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "FallosPeq"
plural "false"
caps "false"
noprefix "false"

\end_inset

 y en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "FallosMed"
plural "false"
caps "false"
noprefix "false"

\end_inset

, en las pruebas con elementos pequeños y medianos se observa una diferencia
 notable en el número de fallos de página que suceden con las estructuras
\family typewriter
 HollowList 
\family default
y 
\family typewriter
BinaryHeap
\family default
, 12.000 y 25.000 fallos en el caso de 
\family typewriter
HollowList
\family default
 y 16.000 y 32.000 en el caso de 
\family typewriter
BinaryHeap 
\family default
frente al número de fallos que se producen en el caso de 
\family typewriter
std::set
\family default
, 47.000 y 63.000 fallos respectivamente.
 De igual forma que sucede con la memoria, en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "FallosGra"
plural "false"
caps "false"
noprefix "false"

\end_inset

 se observa que en el caso de las pruebas con elementos de mayor tamaño
 esta diferencia es menos significativa.
 En este caso, la estructura 
\family typewriter
std::set
\family default
 tiene 110.000 fallos de página, llegando incluso a reducir el número de
 fallos de página que se obtienen al usar la estructura 
\family typewriter
BinaryHeap
\family default
, en la cual se producen 128.000 fallos de página.
 Por otra parte, las estructuras 
\family typewriter
HollowList
\family default
 consiguen la mejor marca en este aspecto, obteniendo un total de 64.000
 fallos de página.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Fallos de página-GenRandom-0.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "FallosPeq"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Fallos de página en las pruebas con objetos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Fallos de página-GenRandom-1.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "FallosMed"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fallos de página en las pruebas con objetos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/carlo/Documents/GitHub/TFG/src/genGraphs/figure_Fallos de página-GenRandom-2.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "FallosGra"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Fallos de página en las pruebas con objetos grandes
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Análisis
\end_layout

\begin_layout Standard
Analizando todos los resultados se puede concluir que la que mejor rendimiento
 tiene sobre estas pruebas es la estructura 
\family typewriter
BinaryHeap
\family default
, es la estructura más rápida en los 3 casos de prueba planteados (elementos
 pequeños, medianos y grandes), además de tener un uso de memoria similar
 a las 
\family typewriter
HollowList
\family default
 y considerablemente inferior al de la estructura 
\family typewriter
std::set
\family default
.
 Sin embargo, a pesar de ser la estructura más eficiente, 
\family typewriter
BinaryHeap
\family default
 tiene un gran punto negativo, que dependiendo del uso que se desee dar
 a esta estructura puede hacer que se descarte como opción.
 Este problema es, como ya se ha comentado, que no soporta las búsquedas
 de elementos en la estructura, al contrario que las otras dos que sí que
 las soportan.
 La clasificación de las otras dos estructuras es más compleja.
 Por una parte, las estructuras 
\family typewriter
HollowList
\family default
 y 
\family typewriter
ptrHollowList 
\family default
tienen un mejor rendimiento que el 
\family typewriter
std::set 
\family default
al ser usadas con elementos pequeños, además de tener un uso de memoria
 mucho menor.
 Por otra parte, el 
\family typewriter
std:set 
\family default
tiene un mejor rendimiento con las estructuras más grandes y además la diferenci
a en el uso de memoria en estos casos entre estas dos estructuras se reduce
 considerablemente.
 Por último, en estas pruebas no se ha comprobado la eficiencia del borrado
 de elementos concretos o la búsqueda de elementos, métricas que posiblemente
 tengan mejores resultados en el caso de 
\family typewriter
std::set 
\family default
que en las 
\family typewriter
HollowList
\end_layout

\begin_layout Standard
Analizando los resultados obtenidos de las 
\family typewriter
HollowList
\family default
, estas parecen obtener un mejor rendimiento con sublistas grandes cuando
 los elementos son pequeños y sublistas pequeñas cuando los elementos son
 grandes.
 Aunque las diferencias no son demasiado grandes, sería posible mejorar
 los rendimientos de estas estructuras realizando pruebas con más tamaños
 de sublistas.
\end_layout

\begin_layout Standard
Otro resultado que cabe destacar es la poca diferencia que se observa entre
 las estructuras 
\family typewriter
HollowList 
\family default
y 
\family typewriter
ptrHollowList
\family default
, siendo esta última la que obtiene peores resultados, contrario a los resultado
s esperados.

\family typewriter
 
\family default
La idea original de la implementación de ptrHollowList era añadir un nivel
 de indirección al usar los vectores a través de 
\family typewriter
smart_pointers 
\family default
para así evitar que toda la memoria esté en un mismo bloque y, en ultima
 instancia, el uso de esta estructura tenga los mismos costes que el uso
 de un 
\family typewriter
std::vector.
 
\family default
Sin embargo, analizando con más profundidad la estructura 
\family typewriter
std::vector
\family default
, en la cual se basan ambas estructuras, se ha podido deducir que estos
 resultados vienen de la indirección que ya proporciona el 
\family typewriter
std::vector.
 
\family default
Esto se debe a que la estructura 
\family typewriter
std::vector, 
\family default
en lugar de almacenar un array con los elementos del vector, almacena punteros
 a esa estructura (uno al principio de esa lista, otro al final, y otro
 a la última dirección de memoria que se tiene reservada).
 Esto hace que no solo no proporcione ninguna mejora el uso de indirección
 en este caso, sino que además genere un sobre coste, ya que por cada acceso
 que se desee hacer a un elemento concreto, la estructura 
\family typewriter
ptrHollowList 
\family default
tendrá que hacer un acceso extra a memoria en comparación con la estructura
 
\family typewriter
HollowList
\family default
.
\end_layout

\begin_layout Standard
En vista de estos nuevos detalles, se decidió implementar la estructura
 
\family typewriter
HollowListv2
\family default
 con la expectativa de que en las búsquedas sobre el vector principal se
 reducirán en 1 los accesos a memoria, ya que en lugar de obtener de memoria
 la sublista deseada y a continuación obtener de esa sublista el primer
 elemento se podrá acceder directamente al primer elemento de la sublista.
 Pero en contra de lo que se esperaba, en lugar de mejorar el rendimiento
 de 
\family typewriter
HollowList
\family default
 se ha obtenido un peor rendimiento.
\end_layout

\begin_layout Standard
Un detalle importante que no se observa en las graficas resumidas, en las
 cuales solo se muestra la variación más eficiente de cada estructura, es
 la diferencia que existe entre las variaciones de 
\family typewriter
HollowListv2
\family default
, y las variaciones del resto de implementaciones 
\family typewriter
HollowList
\family default
.
 Como se observa en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "TtotalPeq"
plural "false"
caps "false"
noprefix "false"

\end_inset

 , la 
\begin_inset CommandInset ref
LatexCommand ref
reference "TtotalMed"
plural "false"
caps "false"
noprefix "false"

\end_inset

 y, especialmente en la 
\begin_inset CommandInset ref
LatexCommand ref
reference "TtotalGra"
plural "false"
caps "false"
noprefix "false"

\end_inset

, las distintas variaciones de tanto 
\family typewriter
ptrHollowList 
\family default
como 
\family typewriter
HollowList
\family default
, a pesar de tener diferencias de rendimiento todas las variaciones, no
 hay una gran dispersión entre los distintos valores, sin embargo, en el
 caso de 
\family typewriter
HollowListv2 
\family default
hay grandes diferencias de rendimiento entre las distintas variaciones,
 esto puede deberse a varios motivos, como algún error en la implementación
 de esta estructura que resulte en que cuanto más grandes sean las sublistas
 más ineficiente será la estructura, o que la variación de este parámetro
 afecte más a esta estructura que al resto de 
\family typewriter
HollowList.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/Graficas/Todas figure_Tiempo total (s)-GenRandom-0.svg
	scale 40
	rotateOrigin leftTop

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TtotalPeq"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos pequeños
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/Graficas/Todas figure_Tiempo total (s)-GenRandom-1.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TtotalMed"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos medianos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename include/Graficas/Todas figure_Tiempo total (s)-GenRandom-2.svg
	scale 40

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "TtotalGra"

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Tiempos totales de las pruebas con elementos grandes
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
inverted 0
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
