#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% enables calculations
\usepackage{calc}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master TFG.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Abstract"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 2
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Resumen
\end_layout

\begin_layout Standard
En este trabajo se aborda la comparación de cinco estructuras de datos:
 
\family typewriter
std::set
\family default
, 
\family typewriter
HollowList
\family default
, 
\family typewriter
ptrHollowList
\family default
, 
\family typewriter
HollowListv2
\family default
 y 
\family typewriter
BinaryHeap
\family default
.
 Se examinan sus implementaciones, operaciones y se realizan pruebas para
 evaluar su rendimiento.
\end_layout

\begin_layout Standard
La implementación de 
\family typewriter
std::set 
\family default
en C++ utiliza un árbol rojo-negro, conocido como Red-Black Tree, que garantiza
 un árbol autobalanceado.
 Las operaciones de inserción, borrado y búsqueda en 
\family typewriter
std::set 
\family default
tienen un coste de ejecución de O(log n), donde n es el número de elementos.
\end_layout

\begin_layout Standard
Por otro lado, 
\family typewriter
HollowList
\family default
, 
\family typewriter
ptrHollowList 
\family default
y 
\family typewriter
HollowListv2
\family default
 son estructuras que se basan en un vector de vectores para almacenar elementos.
 La diferencia entre ellas radica en que 
\family typewriter
ptrHollowList 
\family default
almacena una lista de punteros a vectores, mientras que HollowList almacena
 directamente los vectores y por último, 
\family typewriter
HollowListv2
\family default
 almacena una lista de nodos que contienen un elemento y un vector.
 Estas estructuras realizan búsquedas binarias para determinar en qué vector
 insertar un nuevo elemento y tienen un coste de ejecución de O(log n) para
 la inserción y búsqueda de elementos y O(1) para el borrado .
\end_layout

\begin_layout Standard
El 
\family typewriter
BinaryHeap 
\family default
es una implementación de un montículo sobre un array en lugar de un árbol.
 Permite el acceso a los nodos padre e hijos a través de cálculos de índice
 en lugar de usando punteros.
 Las operaciones de inserción y borrado del primer elemento tienen un tiempo
 de ejecución de O(log n), mientras que la búsqueda no es posible implementarla
 de forma eficientemente en esta estructura debido a su estructura de montículo.
\end_layout

\begin_layout Standard
Se realizaron pruebas en cada estructura, insertando elementos en diferentes
 cantidades y tamaños, y evaluando el tiempo de ejecución, uso de memoria
 y fallos de página.
 Se utilizaron distintos objetos para almacenar en las estructuras y se
 probaron diferentes casos de entrada (datos ordenados, ordenados en orden
 inverso y en orden aleatorio).
\end_layout

\begin_layout Standard
Los resultados de las pruebas permitieron comparar el rendimiento de cada
 estructura en términos de tiempo de ejecución, uso de memoria y fallos
 de página y sacar conclusiones sobre que estructura es la mas recomendable
 dependiendo del caso de uso.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter*

\lang english
Abstract
\end_layout

\begin_layout Standard

\lang english
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Abstract} 
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
adds table of contents entry
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
Int this document, the comparison of five data structures is addressed:
 std::set, HollowList, ptrHollowList, HollowListv2, and BinaryHeap.
 Their implementations, operations, and performance are examined through
 tests.
\end_layout

\begin_layout Standard

\lang english
The implementation of std::set in C++ uses a red-black tree, known as a
 Red-Black Tree, which guarantees a self-balancing tree.
 The insertion, deletion, and search operations in std::set have an execution
 cost of O(log n), where n is the number of elements.
\end_layout

\begin_layout Standard

\lang english
On the other hand, HollowList, ptrHollowList, and HollowListv2 are structures
 that are based on a vector of vectors to store elements.
 The difference between them lies in the fact that ptrHollowList stores
 a list of pointers to vectors, while HollowList stores the vectors directly,
 and finally, HollowListv2 stores a list of nodes that contain an element
 and a vector.
 These structures perform binary searches to determine which vector to insert
 a new element into and have an execution cost of O(log n) for element insertion
 and search, and O(1) for deletion.
\end_layout

\begin_layout Standard

\lang english
The BinaryHeap is an implementation of a heap on an array instead of a tree.
 It allows access to parent and child nodes through index calculations instead
 of using pointers.
 The insertion and deletion of the first element operations have a runtime
 of O(log n), while efficient implementation of search is not possible in
 this structure due to its heap structure.
\end_layout

\begin_layout Standard

\lang english
Tests were conducted on each structure by inserting elements in different
 quantities and sizes, evaluating execution time, memory usage, and page
 faults.
 Different objects were used to store data in the structures, and different
 input cases were tested (sorted data, reverse sorted data, and randomly
 ordered data).
\end_layout

\begin_layout Standard

\lang english
The test results allowed for comparing the performance of each structure
 in terms of execution time, memory usage, and page faults, and drawing
 conclusions about which structure is most recommended depending on the
 use case.
\end_layout

\end_body
\end_document
