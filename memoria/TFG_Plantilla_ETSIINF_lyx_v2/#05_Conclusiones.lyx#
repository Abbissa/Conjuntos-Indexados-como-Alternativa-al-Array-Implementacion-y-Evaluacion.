#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% increases link area for cross-references and autoname them
% if you change the document language to e.g. French
% you must change "extrasenglish" to "extrasfrench"
\AtBeginDocument{%
 \renewcommand{\ref}[1]{\mbox{\autoref{#1}}}
}
\def\refnamechanges{%
 \renewcommand*{\equationautorefname}[1]{}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}
\@ifpackageloaded{babel}{\addto\extrasenglish{\refnamechanges}}{\refnamechanges}

% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
% for more info about these settings, see
% http://mirrors.ctan.org/macros/latex/contrib/koma-script/doc/scrguien.pdf
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
% for more information see section 9 of
% ftp://www.ctan.org/pub/tex-archive/macros/latex2e/contrib/fancyhdr/fancyhdr.pdf
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage
\use_default_options true
\master TFG.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8x
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\is_math_indent 1
\math_indentation default
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument 1
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Conclusiones
\end_layout

\begin_layout Itemize
El objetivo del trabajo era explorar e implementar alternativas al std::set
 en el ámbito de los requisitos indicados para la implementación de listas
 ordenadas:
\end_layout

\begin_deeper
\begin_layout Itemize
Operación para insertar elementos en la estructura de datos.
\end_layout

\begin_layout Itemize
Operación para obtener el elemento más grande de la estructura de datos.
\end_layout

\begin_layout Itemize
Operación para borrar el elemento más grande de la estructura.
\end_layout

\begin_layout Itemize
El coste teórico de todas las operaciones no debe superar: 
\begin_inset Formula $O(\log\left(n\right))$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Se han implementado cuatro estructuras con los requisitos especificados
 para una lista ordenada en C++ como alternativas al std::set.
\end_layout

\begin_layout Itemize
Tres de las implementaciones se basan en el concepto de un array ordenada
 con huecos entre sus elementos, para así facilitar la inserción de nuevos
 elementos, mientras que la última es una implementación de un montículo
 binario usando un vector en vez de nodos.
\end_layout

\begin_layout Itemize
Se han generado gráficas usando librerías de python como 
\family typewriter
matplotlib, pandas 
\family default
y 
\family typewriter
numpy
\family default
.
\end_layout

\begin_layout Itemize
Los resultados obtenidos han permitido la comparación del rendimiento de
 las distintas estructuras.
\end_layout

\begin_layout Itemize
Comparando el rendimiento de las distintas estructuras se ha podido determinar
 que dependiendo de las funcionalidades y caso de uso, unas estructuras
 pueden resultar más beneficiosas que otras.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Para casos en los que no se requiera la funcionalidad de búsqueda o borrado
 de elementos concretos de la lista, la opción más recomendable parece ser
 la estructura 
\family typewriter
BinaryHeap.
\end_layout

\begin_layout Enumerate
Para casos en los que se requiera la funcionalidad de búsqueda o borrado
 de elementos y los elementos que se usen elementos con un tamaño no muy
 grande, hasta 64 bytes, o en casos donde sea una prioridad minimizar el
 uso de memoria, los resultados parecen indicar que la estructura más recomendab
le es la 
\family typewriter
BinaryHeap
\family default
.
 En casos en los que se desee reducir el consumo de memoria al máximo, una
 alternativa puede ser usar la estructura 
\family typewriter
HollowListv2
\family default
,
\family typewriter
 
\family default
aunque esto conlleva un coste en rendimiento, esta estructura es considerablemen
te más lenta.
\end_layout

\begin_layout Enumerate
Por último, en los casos en los que se requiera la funcionalidad de búsqueda
 o borrado de elementos y los elementos con los que se desea usar la estructura
 tienen un tamaño considerable, 64 bytes o superior, la estructura más recomenda
ble según los resultados obtenidos es el 
\family typewriter
std::set
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Aunque los resultados obtenidos parecen ser positivos, las pruebas realizadas
 son insuficientes determinar el rendimiento de estas estructuras, y, por
 lo tanto es recomendable evaluarlas con pruebas más exhaustivas y detalladas,
 Adicionalmente, sería recomendable revisar la implementación de estas estructur
as, ya que es posible que modificando la implementación de alguna estructura
 se aumente el rendimiento de estas.
 Algunas pruebas que se pueden realizar en un futuro para mejorar el análisis
 y comparación de estas estructuras son las siguientes:
\end_layout

\begin_deeper
\begin_layout Itemize
Pruebas de rendimiento con casos de prueba con un rango de número de elementos
 mayor: en este trabajo se han realizado pruebas con un número de elementos
 considerablemente elevado, pero es posible que los resultados obtenidos
 en estas pruebas no puedan aplicarse a casos de uso con un número de elementos
 más reducido.
 Este mismo razonamiento se puede aplicar a casos de uso en los que se usen
 un número de elementos mayor al contemplado en estas pruebas.
\end_layout

\begin_layout Itemize
Pruebas con un uso más realista de las estructuras: en este trabajo las
 pruebas realizadas consisten en rellenar la estructura con un número definido
 de elementos, a continuación borrar e insertar 1.000.000 de elementos y por
 último vaciar la estructura al completo.
 A pesar de que estás pruebas son útiles para analizar el coste de las operacion
es en las distintas estructuras y obtener una idea aproximada de cuál es
 su rendimiento en un caso de uso real, lo cierto es que estas pruebas no
 reflejan un caso de uso real, donde la mayor parte de las operaciones se
 realizaran con un tamaño de la estructura constante.
\end_layout

\begin_layout Itemize
Pruebas de borrado y búsqueda de elementos en las estructuras que lo permiten:
 aunque las estructuras 
\family typewriter
HollowList 
\family default
permiten la búsqueda y borrado de elementos concretos, en este trabajo no
 se han implementado, y por lo tanto, tampoco se han probado.
 El resultado de las pruebas de estas operaciones podría ayudar a determinar
 con más claridad en que casos puede resultar más eficiente el 
\family typewriter
std::set
\family default
 y en que casos sería mejor usar una 
\family typewriter
HollowList
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Un resultado adicional de la realizacion de este trabajo son las competencias
 que se han obtenido en distintos aspectos.
 Antes de la realización de este trabajo no se habia utilizado ni la herramienta
 de CMake ni el lenguaje C++.
 
\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
inverted 0
status collapsed

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
